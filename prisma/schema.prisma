datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  collections   Collection[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String           @db.VarChar(191)
  provider          String           @db.VarChar(191)
  providerAccountId String           @db.VarChar(191)
  refresh_token     String?          @db.Text
  access_token      String?          @db.Text
  expires_at        Int?
  token_type        String?          @db.VarChar(191)
  scope             String?          @db.Text
  id_token          String?          @db.Text
  session_state     String?          @db.VarChar(191)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Note {
  id           Int        @id @default(autoincrement())
  noteName     String
  content      String     @db.Text
  userId       String
  collectionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
